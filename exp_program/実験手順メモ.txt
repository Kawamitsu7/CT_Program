0. 実験環境
 - python 3.6.5
 - opencv2 2.4.12
 - matplotlib 2.2.2
 - numpy 1.13.3
 - pandas 0.22.0

1. 実験準備
 - Sinogramフォルダ内の1degLsfフォルダをコピーして，2枚おき，3枚おき…に画像を残して，
   1~6度，8~10度刻みの投影画像フォルダを作る．(投影角度削減)

2. 実験手順
	2.1 再構成画像作成
		2.1.1 サイノグラム作成
			- Sinogram フォルダ内の list.txt に，説明に従ってディレクトリ情報を記述
			- list_sinogram.py を実行 (->投影画像セットからサイノグラムを作成)
			- img_resize フォルダ内の size_adjust.py を用いて，
			  サイノグラムの横幅を1/2, 1/4, 1/5, 1/8にした画像用意(解像度削減)
			- 1degLsfから作ったサイノグラムをコピー，ImageJを使って8bit画像にする
		
		2.1.2 画像再構成
			- 2.1.1 の出力画像を img_recon フォルダに移動
			- list_img_recon.py を実行
				- サイノグラムのディレクトリ入力
				- ２つの質問は"実行するを選択"
				- 途中サイノグラムの中心合わせをする際にしきい値を聞かれるので，
				  ImageJ などで FP_Trans フォルダのサイノグラムを ImageJ で確認しながら，
				  適切な値を入力する．(16bit画像は43500だったはず)
				  
		2.1.3 解像度削減画像の大きさ補正
			- すべての出力画像を img_resize フォルダ内の size_adjust.py を用いて，
			  1280×1280に合わせる
		
	2.2 画像評価
		- 2.1 の出力画像を evaluate フォルダに移動
		- Block_Edge_kai.py を実行
			- ディレクトリを選択
			- ROIの設定方法は1(数値入力)
			- ROIは左上(566,500)，右下(701,767)
			- エッジ調整は1度だけ0.2で実行
			- Zeroing処理は左側4.35,右側5.5で実行
			- データ数は256
			- CSV出力はする(1)
				-> MTFの分布が出力される